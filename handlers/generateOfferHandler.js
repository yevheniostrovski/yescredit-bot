const axios = require('axios');
const banks = require('../config/banks');
const config = require('../config/variables');

async function getTopBanks() {
    try {
        const response = await axios.get(config.scoresUrl);
        const scores = response.data;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–Ω–∫–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏–∑ scores.cache
        const sortedBanks = [...banks].sort((a, b) => {
            const scoreA = scores[a.key] || 0;
            const scoreB = scores[b.key] || 0;
            return scoreB - scoreA; // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
        });

        // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-8 –æ—Ñ—Ñ–µ—Ä–æ–≤
        const topBanks = sortedBanks.slice(0, 8);

        return topBanks;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-8 –æ—Ñ—Ñ–µ—Ä–æ–≤:', error);
        return [];
    }
}

// –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –æ—Ñ—Ñ–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const offeredIndexes = [];

async function generateOfferHandler(msg, bot) {
    try {
        await bot.sendMessage(msg.from.id, 'üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ–¥–±—ñ—Ä –∫–æ–º–ø–∞–Ω—ñ—ó');

        // –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ñ—Ñ–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 2000));

        const topBanks = await getTopBanks();

        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä—ã, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã
        const availableBanks = topBanks.filter((bank, index) => !offeredIndexes.includes(index));

        // –ï—Å–ª–∏ –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (availableBanks.length === 0) {
            await bot.sendMessage(msg.from.id, '–í–∏–±–∞—á, –∞–ª–µ —Ü–µ –≤—Å—ñ –∫–æ–º–ø–∞–Ω—ñ—ó, —â–æ –º–∏ –º–æ–∂–µ–º –ø–æ—Ä–∞–¥–∏—Ç–∏ —Ç–æ–±—ñ —Å—å–æ–≥–æ–¥–Ω—ñ. –ó–∞—á–µ–∫–∞–π —Ç—Ä—ñ—à–∫–∏ —ñ –º–∏ —Ç–æ–±—ñ —â–æ—Å—å –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–µ–∑–∞–±–∞—Ä–æ–ºüëå');
            return { offer: null, index: null };
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ñ—Ñ–µ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const randomIndex = Math.floor(Math.random() * availableBanks.length);
        const randomOffer = availableBanks[randomIndex];

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
        const selectedIndex = topBanks.indexOf(randomOffer);
        offeredIndexes.push(selectedIndex);

        await sendOfferMessage(msg, bot, randomOffer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞:', error);
        return { offer: null, index: null };
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ñ—Ñ–µ—Ä–æ–º
async function sendOfferMessage(msg, bot, offer) {
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥–æ—á–µ–∫ –æ—Ç 3 –¥–æ 5
        const rating = '‚òÖ'.repeat(Math.floor(Math.random() * 3) + 3);

        let message = `‚úÖ –ö–æ–º–ø–∞–Ω—ñ—è –ø—ñ–¥—ñ–±—Ä–∞–Ω–∞!\n\n`;
        message += `–†–µ–π—Ç–∏–Ω–≥: ${rating}\n\n`;
        message += `üí° –°—å–æ–≥–æ–¥–Ω—ñ —É –Ω–µ—ó —Å–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫ –≤–∏—â–∏–π, –Ω—ñ–∂ –≤ —ñ–Ω—à–∏—Ö –∫–æ–º–ø–∞–Ω—ñ–π.`;

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        const buttons = bot.inlineKeyboard([
            [
                bot.inlineButton('–û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–æ—à—ñ üí∏', { url: offer.advUrl }),
                bot.inlineButton('–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —â–µ', { callback: 'GENERATE_OFFER' })
            ]
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.sendMessage(msg.from.id, message, { parseMode: 'Markdown', replyMarkup: buttons });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ñ—Ñ–µ—Ä–æ–º:', error);
    }
}

module.exports = generateOfferHandler;
